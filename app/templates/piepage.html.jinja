<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/static/style.css" />
  </head>
  <body>
    <h3>Pie Graph Page</h3>
    <button class="logoutbutton" onclick="location.href = '/login'">Logout</button><br>
    <button class="button" onclick="history.back()">Back</button><br>
    <button class="button" onclick="darkmode()">Toggle dark mode</button>
    <br>

    <!-- Dropdown with table choices -->
    <select id="tablesX" onchange="chooseTableX(value)">
      <option> Select a table - x </option>  
    </select>
    
    <select id="tablesY" onchange="chooseTableY(value)">
      <option> Select a table - y</option>  
    </select>
    
    <br><br>
    
    <!-- Column dropdowns, dependent on what table user chooses-->
    <select id="xDropdown" onchange = "chooseX(value)">
      <option> Select a column - x </option>  
    </select>
    
    <select id="yDropdown" onchange = 'chooseY(value)'>
      <option> Select a column - y </option>  
    </select>
    
    <br><br>
    
    <select id='operationDropdown' onchange = 'chooseOperation(value)'>
      <option> Select operation </option>
      <option value = '-1'> No operation </option>
      <option value = '0'> Average </option>
      <option value = '1'> Summation </option>
    </select>
    
    <br><br>
    
    <!--- REMOVE: Keep track of current values, useful for debugging -->
    <p id='tableX'></p>
    <p id='tableY'></p>
    <p id = 'columnX'></p>
    <p id = 'columnY'></p>
    <p id = 'columnYType'></p>
    <p id = 'operation'></p>
    
    <button class="button" onclick = 'getGraph(xColumn, yColumn, yType, operation)'> Graph </button><br>
    
    <button class="button" onclick=updateGraph()> Refresh Graph </button>
    
    <script>
      // jinja substitutes the scripts root directory upon creation.
      $SCRIPT_ROOT = {{ request.script_root|tojson }};
    
      // IMPORTANT: global variables
      var columnChoicesX = [];
      var columnChoicesY = [];
      var tableChoices = [];
    
      var table = 'unspecified';
      var yType;
      var operation = 'unspecified';
    
      var xColumn = {table:'unspecified', column:'unspecified'};
      var yColumn = {table:'unspecified', column:'unspecified'};
    
      //NEW
      var database;
      
      // html elements
      var tableDropdownX = document.getElementById("tablesX");
      var tableDropdownY = document.getElementById("tablesY");
      var xDropdown = document.getElementById("xDropdown");
      var yDropdown = document.getElementById("yDropdown");
    
      // on page load, automatically:
      setTables(tableChoices); // set tables from database
      displayTables(); // display table dropdown
    
      var x2Column;
      var y2Column;
      var y2Type;
      var operation2;
    </script>
    
    <div class="chartCard">
      <div class="chartBox">
        <canvas id="myChart"></canvas>
        Change name of graph: <input onkeyup="updatetitle(this)" type="text"><br>
        <button class="button" onclick="exportimage()">Download Image</button>
        <button class="button" onclick="favgraph()">Favorite Graph</button>
        <button class="button" onclick="graphhistory()">View Page</button><br>
        <button class="button" onclick="seconddata()">Add Second Dataset</button>
        <button class="button" onclick="exportsavedata('pie', xColumn, yColumn, yType, operation, x2Column, y2Column, y2Type, operation2)">Export Graph Settings</button>
      </div>
    </div>

    <script src="{{ url_for('static', filename='chart.js') }}"></script>
    <script src="{{ url_for('static', filename='allfunctions.js') }}"></script>
    
    <script>
    const DATA_COUNT = 5;
    const NUMBER_CFG = {count: DATA_COUNT, min: 0, max: 100};
      // setup 
      const data = {
          labels: [
          'Red',
          'Blue',
          'Yellow'
        ],
        datasets: [{
          label: 'My First Dataset',
          data: [300, 50, 100],
          backgroundColor: [
            'rgb(255, 99, 132)',
            'rgb(54, 162, 235)',
            'rgb(255, 205, 86)'
          ],
          hoverOffset: 4
        },
        {
          hidden: true,
          label: 'Dataset 2 ',
          data: [400, 60, 80],
          backgroundColor: [
            'rgb(255, 255, 132)',
            'rgb(54, 162, 255)',
            'rgb(255, 205, 100)'
          ],
          hoverOffset: 4
        }]
      };

      //plugin
      const plugin = {
        id: 'custom_canvas_background_color',
        beforeDraw: (chart) => {
          const ctx = chart.canvas.getContext('2d');
          ctx.save();
          ctx.globalCompositeOperation = 'destination-over';
          ctx.fillStyle = 'white';
          ctx.fillRect(0, 0, chart.width, chart.height);
          ctx.restore();
        }
      };

      // config 
      const config = {
        type: 'pie',
        data: data,
        plugins: [plugin],
        options: {
          responsive: true,
          plugins: {
              legend: {
                  position: 'top',
              },
              title: {
                  display: true,
                  text: 'Pie Chart'
              }
          }
      },
      };

      // render init block
      const myChart = new Chart(
        document.getElementById('myChart'),
        config
      );

      if(typeof(Storage)!=="undefined" && localStorage.x1chose){
        importsavedata();
      }

      function seconddata(){
        myChart.config.data.datasets[1].hidden = false;
        myChart.config.data.datasets[1].label = 'Dataset 2 Name';
        myChart.update();
      }
    </script>
  </body>
</html>