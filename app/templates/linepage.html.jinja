<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
* {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
}
.chartMenu p {
  padding: 10px;
  font-size: 20px;
}
.chartCard {
  width: 100vw;
  height: calc(100vh - 40px);
  display: flex;
  align-items: center;
  justify-content: center;
}
.chartBox {
  width: 700px;
  padding: 20px;
  border-radius: 20px;
  background: white;
  }

  // for drop-down box
.dropbtn {
  background-color: #3498DB;
  color: white;
  padding: 16px;
  font-size: 16px;
  border: none;
  cursor: pointer;
}

.dropbtn:hover, .dropbtn:focus {
  background-color: #2980B9;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f1f1f1;
  min-width: 160px;
  overflow: auto;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown a:hover {background-color: #ddd;}

.show {display: block;}
</style>

<script src="{{ url_for('static', filename='chart.js') }}"></script>
<script src="{{ url_for('static', filename='jquery.js') }}"></script>
</head>
<body>
<h3>Line Graph Page</h3>

<button onclick="location.href = '/'">Main Menu</button>







<button onclick='displayTableDropdown();'> Display table dropdown </button>

<!-- Dropdown with table choices 
     When dropdown choice is changed, call displayColumnDropdown with corresponding value (table name)-->
<select id="tables" onchange="displayColumnDropdown(value)">
  <option> Select a table </option>  
</select>





<script>

  // jinja substitutes the scripts root directory upon creation.
  $SCRIPT_ROOT = {{ request.script_root|tojson }};

  var tableDropdown = document.getElementById("tables");
  //var tableChoices = ["dummy table 1", "dummy table 2"]; // table names to be displayed in dropdown

  var rawJSON = [[],[]]; // defining global 2d array

  // load tables from JSON from db

  // pass by reference
  var tableChoices = [];
  //getTables(tableChoices);
  getTables(tableChoices);

  // pass by value (doesn't work)
  ///var tableChoices = getTables();

  // this is being called before getTables for some reason
  displayTableDropdown(); // on page load, automatically display table dropdown


  // gets tables from raw JSON data
  // passing by value, but might need to change this - Arrays are weird in JS
  function getTables(tableChoices) {
    //getRawJSON(); // ensures rawJSON is assigned
    var currentTable;


    $.getJSON($SCRIPT_ROOT + '/db_all', function(JSON) { // replacing $ with jQuery yields same error
      // loop through JSON object and create array with unique table names
      // ASSUMES: first element of 2d array is table name, second is column name
      for (var i = 0, len = JSON.length; i < len; i++) {
        currentTable = JSON[i][0];
        var inTables = (tableChoices.indexOf(currentTable) > -1);

        // if currentTable is not already in tables,
        if (!inTables) //(!(currentTable in tables))
          tableChoices.push(currentTable); // add it to tables
      }
    });
    //return tableChoices; // no need to return if just modifying a global var
  }

  
  // displays elements of (global variable) tableChoices in tableDropdown element
  // TODO: figure out how generalize this function by passing in a parameter
  function displayTableDropdown() {
    for (var i = 0; i < tableChoices.length; i++) {
      var optn = tableChoices[i];
      var el = document.createElement("option");
      el.textContent = optn;
      el.value = optn;

      tableDropdown.appendChild(el);
    }
  }
</script>






<!-- Column dropdown, dependent on what table user chooses -->
<select id="columns"></select>





<script>
  var columnDropdown = document.getElementById("columns");
  //var columnChoices = ["dummy column 1", "dummy column 2"];

  // global variable with choice of columns for given table
  var columnChoices = [];


  // displays column dropdown from columnChoices
  // TODO: modify to erase previous dropdown before displaying new one
  function displayColumnDropdown(table) {
    getColumns(table, columnChoices); // assigns appropriate columns to columnChoices

    // loops over columns from db, adding those that correspond to table
    for (var i = 0; i < columnChoices.length; i++) {
      var optn = columnChoices[i];
      var el = document.createElement("option");
      el.textContent = optn;
      el.value = optn;

      columnDropdown.appendChild(el);
    }
  }


  // returns list of columns associated with given table name
  function getColumns(tableName, columnChoices) {
    $.getJSON($SCRIPT_ROOT + '/db_all', function(JSON) {
      var currentTable;
      var currentColumn;

      // loop through JSON object and grab column names associated with given table name
      // ASSUMES: first element of 2d array is table name, second is column name
      for (var i = 0, len = JSON.length; i < len; i++) {
        currentTable = JSON[i][0];
        currentColumn = JSON[i][1];

        // if table name matches
        if (tableName == currentTable) {
          columnChoices.push(currentColumn);
        }
      }
    });
  }


  // saves user's choice of table
  // TODO
  function chooseTable(x) {
    $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
      var tmp = JSON.toString();
      var allVars = tmp.split(",");

      // gets odd values from array, which are dates
      var dates = allVars.filter((element, index) => {
        return index % 2 === 1;
      });

      // sets graph x-values to dates
      myChart.config.data.labels = dates;
    }, "json");
  }


  // sets y-axis
  // TODO
  function setColumn(y) {
    if (y == 'totalSalary') {
      $.post($SCRIPT_ROOT + '/request', { type: 1, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
        var tmp = JSON.toString();
        var allVars = tmp.split(",");

        // gets even values from array, which are salaries
        var salaries = allVars.filter((element, index) => {
          return index % 2 === 0;
        });

        // sets graph y-values to salaries
        myChart.config.data.datasets[0].data = salaries;
      }, "json");
    }

    else if (y == 'avgSalary') {
      $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
        var tmp = JSON.toString();
        var allVars = tmp.split(",");

        // gets even values from array, which are salaries
        var salaries = allVars.filter((element, index) => {
          return index % 2 === 0;
        });

        // sets graph y-values to salaries
        myChart.config.data.datasets[0].data = salaries;
      }, "json");
    }
  }

  function dropToggleColumn() {
    document.getElementById("setColumn").classList.toggle("show");
  }


// Close the dropdown menu if the user clicks outside of it
// Not sure if this is necessary?
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {
    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}
</script>



<button onclick=updateGraph()> Update Graph </button>

<script>
function updateGraph() {
  myChart.update();
}
</script>






<div class="chartCard">
  <div class="chartBox">
    <canvas id="myChart"></canvas>
    Change name of graph: <input onkeyup="updatename(this)" type="text"><br>
    Change max y axis: <input onkeyup="updateymax(this)" type="number"><br>
    Change min y axis: <input onkeyup="updateymin(this)" type="number"><br>
    Change name of x axis: <input onkeyup="updatexname(this)" type="text"><br>
    Change name of y axis: <input onkeyup="updateyname(this)" type="text"><br>
    <button onclick="exportimage()">Download Image</button><br>
    <button onclick="testRequest()"> Show request result </button>
  </div>
</div>

<script src="{{ url_for('static', filename='chart.js') }}"></script>
<script src="{{ url_for('static', filename='jquery.js') }}"></script>

<script>
// jinja substitutes the scripts root directory upon creation.
$SCRIPT_ROOT = {{ request.script_root|tojson }};



// to be removed
function testRequest() {
  $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
      var tmp = JSON.toString();
      var allVars = tmp.split(",");

      // gets odd values from array, which are dates
      var dates = tmp2.filter((element, index) => {
        return index % 2 === 1;
      });

      var evennums = tmp2.filter((element, index) => {
        return index % 2 === 0;
      });

      myChart.config.data.labels = dates;
      myChart.config.data.datasets[0].data = evennums;
      myChart.update();
  }, "json");
}




// setup 
const data = {
  labels: [50,60,70,80,90,100,110,120,130,140,150],
  datasets: [{
    label: 'Line Graph Name',
    pointRadius: 4,
    backgroundColor: 'rgb(255, 255, 255)',
    pointBackgroundColor: "rgb(0,0,255)",
    data: [7,8,8,9,9,9,10,11,14,14,15]
  }]
};

//plugin
const plugin = {
  id: 'custom_canvas_background_color',
  beforeDraw: (chart) => {
    const ctx = chart.canvas.getContext('2d');
    ctx.save();
    ctx.globalCompositeOperation = 'destination-over';
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, chart.width, chart.height);
    ctx.restore();
  }
};

// config 
const config = {
  type: 'line',
  data,
  plugins: [plugin],
  options: {
    scales: {
        y: {
          title: {
            display: true,
            text: 'y axis'
          },
          suggestedMin: 0,
          suggestedMax: 20
        },
        x: {
          title: {
            display: true,
            text: 'x axis'
          },
          suggestedMin: 0,
          suggestedMax: 200
        }
    }
  }
};

// render init block
const myChart = new Chart(
  document.getElementById('myChart'),
  config
);

function updatename(nameval){
  myChart.config.data.datasets[0].label = nameval.value;
  myChart.update();
}

function updateymax(numval){
  myChart.config.options.scales.y.suggestedMax = numval.value;
  myChart.update()
}

function updateymin(numval){
  myChart.config.options.scales.y.suggestedMin = numval.value;
  myChart.update()
}

function updatexname(nameval){
  myChart.config.options.scales.x.title.text = nameval.value;
  myChart.update()
}

function updateyname(nameval){
  myChart.config.options.scales.y.title.text = nameval.value;
  myChart.update()
}

function exportimage(){
  var a = document.createElement('a');
  a.href = myChart.toBase64Image();
  a.download = 'graph.png';

  // Trigger the download
  a.click();
}
</script>

</body>
</html>