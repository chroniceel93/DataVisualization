<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
  * {
    margin: 0;
    padding: 0;
    font-family: sans-serif;
  }
  .chartMenu p {
    padding: 10px;
    font-size: 20px;
  }
  .chartCard {
    width: 100vw;
    height: calc(100vh - 40px);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .chartBox {
    width: 700px;
    padding: 20px;
    border-radius: 20px;
    background: white;
    }

    // for drop-down box
  .dropbtn {
    background-color: #3498DB;
    color: white;
    padding: 16px;
    font-size: 16px;
    border: none;
    cursor: pointer;
  }

  .dropbtn:hover, .dropbtn:focus {
    background-color: #2980B9;
  }

  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    background-color: #f1f1f1;
    min-width: 160px;
    overflow: auto;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
  }

  .dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
  }

  .dropdown a:hover {background-color: #ddd;}

  .show {display: block;}

  .button {
    background-color: #008CBA;
    border: #555555;
    color: white;
    padding: 15px 25px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 12px;
    margin: 4px 2px;
    cursor: pointer;
    border-radius: 12px;
    transition-duration: 0.4s;
  }

  .logoutbutton {
      background-color: #4CAF50;
      border: none;
      color: white;
      padding: 10px 20px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 12px;
      margin: 4px 2px;
      cursor: pointer;
      border-radius: 12px;
      transition-duration: 0.4s;
  }

  .button:hover {
      background-color: #4CAF50;
      color: white;
  }

  .logoutbutton:hover {
      background-color: #f44336;
      color: white;
  }
</style>

<script src="{{ url_for('static', filename='chart.js') }}"></script>
<script src="{{ url_for('static', filename='jquery.js') }}"></script>
</head>
<body>

<h3>Line Graph Page</h3>
<button class="logoutbutton" onclick="location.href = '/login'">Logout</button><br>
<button class="button" onclick="location.href = '/'">Back</button>

<!-- Dropdown with table choices -->
<select id="tables" onchange="displayColumnDropdown(value)">
  <option> Select a table </option>  
</select>

<script>
  // jinja substitutes the scripts root directory upon creation.
  $SCRIPT_ROOT = {{ request.script_root|tojson }};

  // global variables
  var columnChoices = [];
  var tableChoices = [];
  
  var chosenTable;
  var chosenX;
  var chosenY;
  var chosenYType;
  

  var tableDropdown = document.getElementById("tables");

  // pass by reference
  getTables(tableChoices);

  // on page load, automatically display table dropdown
  displayTableDropdown(); 


  // gets tables from raw JSON data
  // passing by reference with global vars, but might need to change this - Arrays are weird in JS
  // TODO: clean this up by figuring out better way to pass value out (instead of global variable reference)
  function getTables(tableChoices) {
    var currentTable;

    // this used to be .getJSON, but now have syncronous option
    $.ajax({
      url: $SCRIPT_ROOT + '/db_all',
      dataType: 'json',
      async: false,
      //data: myData, // maybe should be '/db_all'?
      success: function(JSON) {

        // loop through JSON object and create array with unique table names
        // ASSUMES: first element of 2d array is table name, second is column name
        for (var i = 0, len = JSON.length; i < len; i++) {
          currentTable = JSON[i][0];
          var inTables = (tableChoices.indexOf(currentTable) > -1);

          // if currentTable is not already in tables,
          if (!inTables)
            tableChoices.push(currentTable); // add it to tables
        }
      }
    });

  }
  
  

  
  // displays elements of (global variable) tableChoices in tableDropdown element
  // TODO: figure out how generalize this function by passing in a parameter
  function displayTableDropdown() {
    for (var i = 0; i < tableChoices.length; i++) {
      var optn = tableChoices[i];
      var el = document.createElement("option");
      el.textContent = optn;
      el.value = optn;

      tableDropdown.appendChild(el);
    }
  }
</script>


<!-- Column dropdowns, dependent on what table user chooses-->
<select id="xColumn" onchange = "chooseX(value)">
  <option> Select x-axis </option>  
</select>

<select id="yColumn" onchange = 'chooseY(value)'>
  <option> Select y-axis </option>  
</select>


<!-- // TODO: fix this
<button onclick='graph();'> Graph </button>
-->

<p id='table'></p>
<p id = 'columnX'></p>
<p id = 'columnY'></p>
<p id = 'columnYType'></p>


<button onclick = 'graphX(firstTable, chosenX, chosenY, chosenYType)'> Update Values </button>


<script>
  var xColumn = document.getElementById("xColumn");
  var yColumn = document.getElementById("yColumn");

  // what to do when user chooses x
  function chooseX(x) {
    chosenX = x; // set global variable
    document.getElementById('columnX').innerHTML = "Current x-axis - " + x; // update html
  }

  // when user chooses y
  function chooseY(y) {
    // set global variables
    chosenY = y; 
    getType(y);

    // update html
    document.getElementById('columnY').innerHTML = "Current y-axis - " + y; 
    document.getElementById('columnYType').innerHTML = "Current y type - " + chosenYType;
  }

  // displays column dropdown from columnChoices
  // TODO: modify to erase previous dropdown before displaying new one
  function displayColumnDropdown(table) {

    document.getElementById('table').innerHTML = "Current table - " + table;
    getColumns(table, columnChoices); // assigns appropriate columns to columnChoices
    chosenTable = table; // sets global var

    

    // loops over columns from db, adding those that correspond to table
    // TODO: don't know why need elx and ely separately, but it works
    for (var i = 0; i < columnChoices.length; i++) {
      var optn = columnChoices[i];

      var elx = document.createElement("option");
      elx.textContent = optn;
      elx.value = optn;

      var ely = document.createElement("option");
      ely.textContent = optn;
      ely.value = optn;

      yColumn.appendChild(elx);
      xColumn.appendChild(ely);
    }
  }


  

  // returns list of columns associated with given table name
  function getColumns(tableName, columnChoices) {

    /*
    $.getJSON($SCRIPT_ROOT + '/db_all', function(JSON) {
      var currentTable;
      var currentColumn;

      // loop through JSON object and grab column names associated with given table name
      // ASSUMES: first element of 2d array is table name, second is column name
      for (var i = 0, len = JSON.length; i < len; i++) {
        currentTable = JSON[i][0];
        currentColumn = JSON[i][1];

        // if table name matches
        if (tableName == currentTable) {
          columnChoices.push(currentColumn);
        }
      }
    });
    */

    $.ajax({
      url: $SCRIPT_ROOT + '/db_all',
      dataType: 'json',
      async: false,
      success: function(JSON) {
        var currentTable;
        var currentColumn;
  
        // loop through JSON object and grab column names associated with given table name
        // ASSUMES: first element of 2d array is table name, second is column name
        for (var i = 0, len = JSON.length; i < len; i++) {
          currentTable = JSON[i][0];
          currentColumn = JSON[i][1];
  
          // if table name matches
          if (tableName == currentTable) {
            columnChoices.push(currentColumn);
          }
        }
      }
    });
  }

  
  // returns type associated with column passed in
  function getType(y) {

    /*
    $.getJSON($SCRIPT_ROOT + '/db_all', function(JSON) {
      var currentColumn;
      var currentType;

      // loop through JSON object and grab column type associated with chosen column
      // ASSUMES: third element of 2d array is column type
      for (var i = 0, len = JSON.length; i < len; i++) {
        currentColumn = JSON[i][1];
        currentType = JSON[i][2];

        // if column name matches
        if (chosenY == currentColumn) {
          chosenYType = currentType;
        }
      }
    });
    */

    $.ajax({
      url: $SCRIPT_ROOT + '/db_all',
      dataType: 'json',
      async: false,
      success: function(data) {
        var currentColumn;
        var currentType;

        // loop through JSON object and grab column type associated with chosen column
        // ASSUMES: third element of 2d array is column type
        for (var i = 0, len = JSON.length; i < len; i++) {
          currentColumn = JSON[i][1];
          currentType = JSON[i][2];

          // if column name matches
          if (chosenY == currentColumn)
            chosenYType = currentType;
        }
      }
    });
  }


// I WAS HERE BEFORE COMMIT

  // TODO
  // type: -1 for no operation (disables step), 0 for avg, 1 for sum
  function graphX(chosenTable, chosenX, chosenY, chosenYType) {

    var A = chosenTable + "," + chosenX;
    var B = chosenTable + "," + chosenY + "," + chosenYType;

    //TODO: make sure this actually gets x-values
    // add y-val filtering
    $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: A, itemB: B, filter: "", step: 1 }, function(JSON) {
      var tmp = JSON.toString();
      var allVars = tmp.split(",");

      // gets odd values from array, which are dates
      var x = allVars.filter((element, index) => {
        return index % 2 === 1;
      });

      // gets even values from array, which are salaries
      var y = allVars.filter((element, index) => {
        return index % 2 === 0;
      });

      // sets graph x-values to dates
      myChart.config.data.labels = x;

      // sets graph y-values to salaries
      myChart.config.data.datasets[0].data = y;

      
    }, "json");
  }


  // sets y-axis
  // TODO
  function graphY(table, column) {
    chosenY = column;
    if (y == 'totalSalary') {
      $.post($SCRIPT_ROOT + '/request', { type: 1, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
        var tmp = JSON.toString();
        var allVars = tmp.split(",");

        // gets even values from array, which are salaries
        var salaries = allVars.filter((element, index) => {
          return index % 2 === 0;
        });

        // sets graph y-values to salaries
        myChart.config.data.datasets[0].data = salaries;
      }, "json");
    }

    else if (y == 'avgSalary') {
      $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
        var tmp = JSON.toString();
        var allVars = tmp.split(",");

        // gets even values from array, which are salaries
        var salaries = allVars.filter((element, index) => {
          return index % 2 === 0;
        });

        // sets graph y-values to salaries
        myChart.config.data.datasets[0].data = salaries;
      }, "json");
    }
  }

  function dropToggleColumn() {
    document.getElementById("setColumn").classList.toggle("show");
  }


  // Close the dropdown menu if the user clicks outside of it
  // Not sure if this is necessary?
  window.onclick = function(event) {
    if (!event.target.matches('.dropbtn')) {
      var dropdowns = document.getElementsByClassName("dropdown-content");
      var i;
      for (i = 0; i < dropdowns.length; i++) {
        var openDropdown = dropdowns[i];
        if (openDropdown.classList.contains('show')) {
          openDropdown.classList.remove('show');
        }
      }
    }
  }
</script>


<button onclick=updateGraph()> Graph </button>

<script>
  function updateGraph() {
    myChart.update();
  }
</script>


<div class="chartCard">
  <div class="chartBox">
    <canvas id="myChart"></canvas>
    Change name of graph: <input onkeyup="updatetitle(this)" type="text"><br>
    Change name of dataset: <input onkeyup="updatename(this)" type="text"><br>
    Change max y axis: <input onkeyup="updateymax(this)" type="number"><br>
    Change min y axis: <input onkeyup="updateymin(this)" type="number"><br>
    Change name of x axis: <input onkeyup="updatexname(this)" type="text"><br>
    Change name of y axis: <input onkeyup="updateyname(this)" type="text"><br>
    <button class="button" onclick="exportimage()">Download Image</button>
    <button class="button" onclick="favgraph()">Favorite Graph</button>
    <button class="button" onclick="location.href = '/viewpage'">View Page</button><br>
    <button class="button" onclick="testRequest()"> Show request result </button>
  </div>
</div>




  <script src="{{ url_for('static', filename='chart.js') }}"></script>
  <script src="{{ url_for('static', filename='jquery.js') }}"></script>

  <script>
    // jinja substitutes the scripts root directory upon creation.
    $SCRIPT_ROOT = {{ request.script_root|tojson }};



    // to be removed
    function testRequest() {
      $.post($SCRIPT_ROOT + '/request', { type: 0, itemA: "salaries,salary", itemB: "salaries,from_date,date", filter: "", step: 1 }, function(JSON) {
          var tmp = JSON.toString();
          var allVars = tmp.split(",");

          // gets odd values from array, which are dates
          var dates = tmp2.filter((element, index) => {
            return index % 2 === 1;
          });

          var evennums = tmp2.filter((element, index) => {
            return index % 2 === 0;
          });

          myChart.config.data.labels = dates;
          myChart.config.data.datasets[0].data = evennums;
          myChart.update();
      }, "json");
    }




    // setup 
    const data = {
      labels: [50,60,70,80,90,100,110,120,130,140,150],
      datasets: [{
        label: 'Line Graph Name',
        pointRadius: 4,
        backgroundColor: 'rgb(255, 255, 255)',
        pointBackgroundColor: "rgb(0,0,255)",
        data: [7,8,8,9,9,9,10,11,14,14,15]
      }]
    };

    //plugin
    const plugin = {
      id: 'custom_canvas_background_color',
      beforeDraw: (chart) => {
        const ctx = chart.canvas.getContext('2d');
        ctx.save();
        ctx.globalCompositeOperation = 'destination-over';
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
      }
    };

    // config 
    const config = {
      type: 'line',
      data,
      plugins: [plugin],
      options: {
        scales: {
            y: {
              title: {
                display: true,
                text: 'y axis'
              },
              suggestedMin: 0,
              suggestedMax: 20
            },
            x: {
              title: {
                display: true,
                text: 'x axis'
              },
              suggestedMin: 0,
              suggestedMax: 200
            }
        },
        plugins: {
          legend: {
              position: 'top',
          },
          title: {
              display: true,
              text: 'Line Graph'
          }
        }
      }
    };

    // render init block
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );

    function updatetitle(nameval){
      myChart.config.options.plugins.title.text = nameval.value;
      myChart.update();
    }

    function updatename(nameval){
      myChart.config.data.datasets[0].label = nameval.value;
      myChart.update();
    }

    function updateymax(numval){
      myChart.config.options.scales.y.suggestedMax = numval.value;
      myChart.update()
    }

    function updateymin(numval){
      myChart.config.options.scales.y.suggestedMin = numval.value;
      myChart.update()
    }

    function updatexname(nameval){
      myChart.config.options.scales.x.title.text = nameval.value;
      myChart.update()
    }

    function updateyname(nameval){
      myChart.config.options.scales.y.title.text = nameval.value;
      myChart.update()
    }

    function exportimage(){
      var a = document.createElement('a');
      a.href = myChart.toBase64Image();
      a.download = 'graph.png';

      // Trigger the download
      a.click();
    }

    //favorite graph function
    function favgraph(){
      var tmp = localStorage.getItem('myArray');
      var image = myChart.toBase64Image();
      var tmp2 = tmp + " " + image;
      localStorage.setItem('myArray', tmp2);
    }
  </script>

</body>
</html>