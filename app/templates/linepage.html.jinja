<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="/static/style.css" />

  <script src="{{ url_for('static', filename='chart.js') }}"></script>
  <script src="{{ url_for('static', filename='jquery.js') }}"></script>
  <script src="{{ url_for('static', filename='allfunctions.js') }}"></script>

</head>
<body>


<h3>Line Graph Page</h3>
<button class="logoutbutton" onclick="location.href = '/login'">Logout</button><br>
<button class="button" onclick="history.back()">Back</button>

<!-- Dropdown with table choices -->
<select id="tables" onchange="chooseTable(value)">
  <option> Select a table </option>  
</select>

<!-- Column dropdowns, dependent on what table user chooses-->
<select id="xDropdown" onchange = "chooseX(value)">
  <option> Select x-axis </option>  
</select>

<select id="yDropdown" onchange = 'chooseY(value)'>
  <option> Select y-axis </option>  
</select>

<select id='operationDropdown' onchange = 'chooseOperation(value)'>
  <option> Select operation </option>
  <option value = '-1'> No operation </option>
  <option value = '0'> Average </option>
  <option value = '1'> Summation </option>
</select>

<!--- REMOVE: Keep track of current values, useful for debugging -->
<p id='table'></p>
<p id = 'columnX'></p>
<p id = 'columnY'></p>
<p id = 'columnYType'></p>
<p id = 'operation'></p>

<button onclick = 'getGraph(table, xColumn, yColumn, yType, operation)'> Update Values </button>

<button onclick=updateGraph()> Graph </button>





<script>
  // jinja substitutes the scripts root directory upon creation.
  $SCRIPT_ROOT = {{ request.script_root|tojson }};

  // IMPORTANT: global variables
  var columnChoices = [];
  var tableChoices = [];
  
  var table = 'unspecified';
  var yType;
  var operation = 'unspecified';

  // to replace xColumn and yColumn, specify table a given column is from
  var xColumn = {table:'unspecified', column:'unspecified'};
  var yColumn = {table:'unspecified', column:'unspecified'};
  
  // html elements
  var tableDropdown = document.getElementById("tables");
  var xDropdown = document.getElementById("xDropdown");
  var yDropdown = document.getElementById("yDropdown");


  // on page load, automatically:
  setTables(tableChoices); // set tables from database
  displayTables(); // display table dropdown

</script>


<!-- From here down is Terrence's work -->


<div class="chartCard">
  <div class="chartBox">
    <h3 id="importload" style="display:none;">Please wait, loading graph from import</h3>
    <canvas id="myChart"></canvas>
      Change name of graph: <input onkeyup="updatetitle(this)" type="text"><br>
      Change name of dataset: <input onkeyup="updatedatesetname1(this)" type="text"><br>
      Change max y axis: <input onkeyup="updateymax(this)" type="number"><br>
      Change min y axis: <input onkeyup="updateymin(this)" type="number"><br>
      Change name of x axis: <input onkeyup="updatexname(this)" type="text"><br>
      Change name of y axis: <input onkeyup="updateyname(this)" type="text"><br>
      <div id="seconddata" style="display:none;">
        Change name of y2 axis: <input onkeyup="updatey2name(this)" type="text"><br>
        Change max y axis: <input onkeyup="updatey2max(this)" type="number"><br>
      Change min y axis: <input onkeyup="updatey2min(this)" type="number"><br>
      </div>
    <button class="button" onclick="exportimage()">Download Image</button>
    <button class="button" onclick="favgraph()">Favorite Graph</button>
    <button class="button" onclick="graphhistory()">View Page</button><br>
    <button class="button" onclick="seconddata()">Add Second Dataset</button>
    <button class="button" onclick="exportsavedata('line', table, xColumn, yColumn, yType)">Export Graph Settings</button>
    <button class="button" onclick="testRequest()"> Show request result </button>
  </div>
</div>


  <script>
    // setup 
    const data = {
      labels: [50,60,70,80,90,100,110,120,130,140,150],
      datasets: [{
        label: 'Dataset 1 Name',
        pointRadius: 4,
        backgroundColor: 'rgb(255, 255, 255)',
        pointBackgroundColor: "rgb(0,0,255)",
        data: [7,8,8,9,9,9,10,11,14,14,15],
        yAxisID: 'y'
      },
      {
        hidden: true,
        label: '',
        pointRadius: 4,
        backgroundColor: 'rgb(255, 255, 255)',
        pointBackgroundColor: "rgb(0,255,0)",
        data: [15,14,13,11,10,8,8,7,6,5],
        yAxisID: 'y2',
      }]
    };

    //plugin
    const plugin = {
      id: 'custom_canvas_background_color',
      beforeDraw: (chart) => {
        const ctx = chart.canvas.getContext('2d');
        ctx.save();
        ctx.globalCompositeOperation = 'destination-over';
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
      }
    };

    // config 
    const config = {
      type: 'line',
      data,
      plugins: [plugin],
      options: {
        scales: {
            y: {
              title: {
                display: true,
                text: 'y axis'
              },
              suggestedMin: 0,
              suggestedMax: 20
            },
            y2: {
              title: {
                display: false,
                text: 'y2 axis'
              },
              display: false,
              position: 'right',
              suggestedMin: 0,
              suggestedMax: 30,
              grid: {
                drawOnChartArea: false,
              }
            },
            x: {
              title: {
                display: true,
                text: 'x axis'
              },
              suggestedMin: 0,
              suggestedMax: 200
            }
        },
        plugins: {
          legend: {
              position: 'top',
          },
          title: {
              display: true,
              text: 'Line Graph'
          }
        }
      }
    };

    // render init block
    const myChart = new Chart(
      document.getElementById('myChart'),
      config
    );

    //code for loading graph from import page
    //maybe able to move to allfunctions.js depening on what db functions are moved there too
    //TODO: add fifth variable for type (summation, average)
    if(typeof(Storage)!=="undefined" && localStorage.dbchose){
      getGraph(localStorage.getItem('dbchose'), localStorage.getItem('x1chose'), localStorage.getItem('y1chose'), localStorage.getItem('y1type'));

      //clear localstorage of import options
      localStorage.removeItem("dbchose");
      localStorage.removeItem("x1chose");
      localStorage.removeItem("y1chose");
      localStorage.removeItem("y1type");

      document.getElementById("importload").style.display = "block";
      setTimeout(function() {
        myChart.update();
        document.getElementById("importload").style.display = "none";
      }, 5000);
      
    }

    //makes things visible for when adding a second dataset
    function seconddata(){
      myChart.config.options.scales.y2.title.display = true;
      myChart.config.options.scales.y2.display = true;
      myChart.config.data.datasets[1].hidden = false;
      myChart.config.data.datasets[1].label = 'Dataset 2 Name';
      document.getElementById("seconddata").style.display = "block";
      myChart.update();
    }
  </script>

</body>
</html>